# Example Terraform Variables File
# Copy this file to terraform.tfvars and customize the values

# =============================================================================
# AWS Configuration
# =============================================================================

# AWS region where resources will be created
aws_region = "us-west-2"

# =============================================================================
# Project Configuration
# =============================================================================

# Name of your project (used for resource naming and tagging)
project_name = "network-automation"

# Environment name (dev, staging, prod)
environment = "dev"

# Owner of the resources (used for tagging)
owner = "Core Network Team"

# Cost center for billing and cost allocation
cost_center = "Engineering"

# =============================================================================
# Network Configuration
# =============================================================================

# VPC CIDR block - adjust based on your network requirements
vpc_cidr = "10.0.0.0/16"

# Public subnet CIDR blocks (for ALB, NAT Gateway, Bastion)
# Must be within VPC CIDR and spread across multiple AZs
public_subnet_cidrs = [
  "10.0.1.0/24",
  "10.0.2.0/24"
]

# Private subnet CIDR blocks (for EC2 instances)
# Must be within VPC CIDR and spread across multiple AZs
private_subnet_cidrs = [
  "10.0.10.0/24",
  "10.0.20.0/24"
]

# Database subnet CIDR blocks (for RDS)
# Must be within VPC CIDR and spread across multiple AZs
database_subnet_cidrs = [
  "10.0.100.0/24",
  "10.0.200.0/24"
]

# =============================================================================
# EC2 Configuration
# =============================================================================

# EC2 instance type for web servers
# Recommendations:
# - dev: t3.micro (free tier eligible)
# - staging: t3.small
# - prod: t3.medium or larger
instance_type = "t3.micro"

# Auto Scaling Group configuration
min_instances     = 1  # Minimum number of instances
max_instances     = 5  # Maximum number of instances
desired_instances = 2  # Desired number of instances

# =============================================================================
# Database Configuration
# =============================================================================

# RDS instance class
# Recommendations:
# - dev: db.t3.micro (free tier eligible)
# - staging: db.t3.small
# - prod: db.t3.medium or larger
db_instance_class = "db.t3.micro"

# Database name (alphanumeric characters only)
db_name = "networkautomation"

# Database master username
db_username = "admin"

# =============================================================================
# DNS Configuration
# =============================================================================

# Your domain name for the application
# Examples:
# - dev.example.com
# - staging.example.com
# - example.com (for production)
domain_name = "network-automation.example.com"

# Whether to create a new Route53 hosted zone
# Set to true if you want Terraform to manage your DNS zone
# Set to false if you have an existing hosted zone
create_hosted_zone = false

# =============================================================================
# Environment-Specific Notes
# =============================================================================

# Development Environment:
# - Uses smaller instance types
# - Single AZ deployment for cost savings
# - Minimal backup retention
# - No read replicas

# Production Environment:
# - Uses larger instance types
# - Multi-AZ deployment for high availability
# - Extended backup retention
# - Read replicas for performance
# - Additional monitoring and alerting

# =============================================================================
# Security Considerations
# =============================================================================

# 1. Never commit sensitive values to version control
# 2. Use AWS Secrets Manager for database passwords
# 3. Rotate access keys regularly
# 4. Enable CloudTrail for audit logging
# 5. Use least-privilege IAM policies

# =============================================================================
# Cost Optimization Tips
# =============================================================================

# 1. Use appropriate instance types for your workload
# 2. Consider Reserved Instances for production
# 3. Enable Auto Scaling to optimize costs
# 4. Use Spot Instances for development environments
# 5. Monitor costs with AWS Cost Explorer
# 6. Tag all resources for cost allocation

# =============================================================================
# Troubleshooting
# =============================================================================

# Common Issues:
# 1. Domain validation - ensure domain ownership
# 2. VPC CIDR conflicts - use non-overlapping ranges
# 3. Subnet sizing - ensure adequate IP addresses
# 4. Resource limits - check AWS service quotas
