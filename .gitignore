# Ignore Terraform state files
*.tfstate
*.tfstate.*
*.tfstate.backup

# Ignore override files
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore .terraform directory
.terraform/
.terraform.lock.hcl

# Ignore crash log files
crash.log
crash.*.log

# Ignore environment variables file
.env

# Ignore auto-generated variable files
terraform.tfvars.json

# Ignore temporary files
*.tmp
*.temp

# Ignore IDE files
.vscode/
.idea/
*.swp
*.swo

# Ignore OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Ignore archive files
*.zip

# Ignore local testing files
test.tf
testing/

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
